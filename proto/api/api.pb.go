// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/api.proto

package api

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	messages "github.com/percona/mongodb-backup/proto/messages"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type BackupType int32

const (
	BackupType_LOGICAL   BackupType = 0
	BackupType_HOTBACKUP BackupType = 1
)

var BackupType_name = map[int32]string{
	0: "LOGICAL",
	1: "HOTBACKUP",
}

var BackupType_value = map[string]int32{
	"LOGICAL":   0,
	"HOTBACKUP": 1,
}

func (x BackupType) String() string {
	return proto.EnumName(BackupType_name, int32(x))
}

func (BackupType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1b40cafcd4234784, []int{0}
}

type DestinationType int32

const (
	DestinationType_FILE DestinationType = 0
	DestinationType_AWS  DestinationType = 1
)

var DestinationType_name = map[int32]string{
	0: "FILE",
	1: "AWS",
}

var DestinationType_value = map[string]int32{
	"FILE": 0,
	"AWS":  1,
}

func (x DestinationType) String() string {
	return proto.EnumName(DestinationType_name, int32(x))
}

func (DestinationType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1b40cafcd4234784, []int{1}
}

type CompressionType int32

const (
	CompressionType_NO_COMPRESSION CompressionType = 0
	CompressionType_GZIP           CompressionType = 1
	CompressionType_SNAPPY         CompressionType = 2
	CompressionType_LZ4            CompressionType = 3
)

var CompressionType_name = map[int32]string{
	0: "NO_COMPRESSION",
	1: "GZIP",
	2: "SNAPPY",
	3: "LZ4",
}

var CompressionType_value = map[string]int32{
	"NO_COMPRESSION": 0,
	"GZIP":           1,
	"SNAPPY":         2,
	"LZ4":            3,
}

func (x CompressionType) String() string {
	return proto.EnumName(CompressionType_name, int32(x))
}

func (CompressionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1b40cafcd4234784, []int{2}
}

type Cypher int32

const (
	Cypher_NO_CYPHER Cypher = 0
	Cypher_AES       Cypher = 1
	Cypher_DES       Cypher = 2
	Cypher_RC4       Cypher = 3
	Cypher_RSA       Cypher = 4
)

var Cypher_name = map[int32]string{
	0: "NO_CYPHER",
	1: "AES",
	2: "DES",
	3: "RC4",
	4: "RSA",
}

var Cypher_value = map[string]int32{
	"NO_CYPHER": 0,
	"AES":       1,
	"DES":       2,
	"RC4":       3,
	"RSA":       4,
}

func (x Cypher) String() string {
	return proto.EnumName(Cypher_name, int32(x))
}

func (Cypher) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1b40cafcd4234784, []int{3}
}

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b40cafcd4234784, []int{0}
}

func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

type Error struct {
	Message              string   `protobuf:"bytes,1,opt,name=Message,proto3" json:"Message,omitempty"`
	Code                 int64    `protobuf:"varint,2,opt,name=Code,proto3" json:"Code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Error) Reset()         { *m = Error{} }
func (m *Error) String() string { return proto.CompactTextString(m) }
func (*Error) ProtoMessage()    {}
func (*Error) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b40cafcd4234784, []int{1}
}

func (m *Error) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Error.Unmarshal(m, b)
}
func (m *Error) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Error.Marshal(b, m, deterministic)
}
func (m *Error) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Error.Merge(m, src)
}
func (m *Error) XXX_Size() int {
	return xxx_messageInfo_Error.Size(m)
}
func (m *Error) XXX_DiscardUnknown() {
	xxx_messageInfo_Error.DiscardUnknown(m)
}

var xxx_messageInfo_Error proto.InternalMessageInfo

func (m *Error) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Error) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

type ClientStatus struct {
	ReplicaSetUUID       string   `protobuf:"bytes,1,opt,name=ReplicaSetUUID,proto3" json:"ReplicaSetUUID,omitempty"`
	ReplicaSetName       string   `protobuf:"bytes,2,opt,name=ReplicaSetName,proto3" json:"ReplicaSetName,omitempty"`
	ReplicaSetVersion    uint64   `protobuf:"varint,3,opt,name=ReplicaSetVersion,proto3" json:"ReplicaSetVersion,omitempty"`
	RunningDBBackup      bool     `protobuf:"varint,4,opt,name=RunningDBBackup,proto3" json:"RunningDBBackup,omitempty"`
	RunningOplogBackup   bool     `protobuf:"varint,5,opt,name=RunningOplogBackup,proto3" json:"RunningOplogBackup,omitempty"`
	BackupType           string   `protobuf:"bytes,6,opt,name=BackupType,proto3" json:"BackupType,omitempty"`
	Compression          string   `protobuf:"bytes,7,opt,name=Compression,proto3" json:"Compression,omitempty"`
	Encrypted            string   `protobuf:"bytes,8,opt,name=Encrypted,proto3" json:"Encrypted,omitempty"`
	Destination          string   `protobuf:"bytes,9,opt,name=Destination,proto3" json:"Destination,omitempty"`
	Dirname              string   `protobuf:"bytes,10,opt,name=Dirname,proto3" json:"Dirname,omitempty"`
	Filename             string   `protobuf:"bytes,11,opt,name=Filename,proto3" json:"Filename,omitempty"`
	Started              int64    `protobuf:"varint,12,opt,name=Started,proto3" json:"Started,omitempty"`
	Finished             int64    `protobuf:"varint,13,opt,name=Finished,proto3" json:"Finished,omitempty"`
	StartOplogTs         int64    `protobuf:"varint,14,opt,name=StartOplogTs,proto3" json:"StartOplogTs,omitempty"`
	LastOplogTs          int64    `protobuf:"varint,15,opt,name=LastOplogTs,proto3" json:"LastOplogTs,omitempty"`
	LastError            string   `protobuf:"bytes,16,opt,name=LastError,proto3" json:"LastError,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClientStatus) Reset()         { *m = ClientStatus{} }
func (m *ClientStatus) String() string { return proto.CompactTextString(m) }
func (*ClientStatus) ProtoMessage()    {}
func (*ClientStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b40cafcd4234784, []int{2}
}

func (m *ClientStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClientStatus.Unmarshal(m, b)
}
func (m *ClientStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClientStatus.Marshal(b, m, deterministic)
}
func (m *ClientStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientStatus.Merge(m, src)
}
func (m *ClientStatus) XXX_Size() int {
	return xxx_messageInfo_ClientStatus.Size(m)
}
func (m *ClientStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientStatus.DiscardUnknown(m)
}

var xxx_messageInfo_ClientStatus proto.InternalMessageInfo

func (m *ClientStatus) GetReplicaSetUUID() string {
	if m != nil {
		return m.ReplicaSetUUID
	}
	return ""
}

func (m *ClientStatus) GetReplicaSetName() string {
	if m != nil {
		return m.ReplicaSetName
	}
	return ""
}

func (m *ClientStatus) GetReplicaSetVersion() uint64 {
	if m != nil {
		return m.ReplicaSetVersion
	}
	return 0
}

func (m *ClientStatus) GetRunningDBBackup() bool {
	if m != nil {
		return m.RunningDBBackup
	}
	return false
}

func (m *ClientStatus) GetRunningOplogBackup() bool {
	if m != nil {
		return m.RunningOplogBackup
	}
	return false
}

func (m *ClientStatus) GetBackupType() string {
	if m != nil {
		return m.BackupType
	}
	return ""
}

func (m *ClientStatus) GetCompression() string {
	if m != nil {
		return m.Compression
	}
	return ""
}

func (m *ClientStatus) GetEncrypted() string {
	if m != nil {
		return m.Encrypted
	}
	return ""
}

func (m *ClientStatus) GetDestination() string {
	if m != nil {
		return m.Destination
	}
	return ""
}

func (m *ClientStatus) GetDirname() string {
	if m != nil {
		return m.Dirname
	}
	return ""
}

func (m *ClientStatus) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

func (m *ClientStatus) GetStarted() int64 {
	if m != nil {
		return m.Started
	}
	return 0
}

func (m *ClientStatus) GetFinished() int64 {
	if m != nil {
		return m.Finished
	}
	return 0
}

func (m *ClientStatus) GetStartOplogTs() int64 {
	if m != nil {
		return m.StartOplogTs
	}
	return 0
}

func (m *ClientStatus) GetLastOplogTs() int64 {
	if m != nil {
		return m.LastOplogTs
	}
	return 0
}

func (m *ClientStatus) GetLastError() string {
	if m != nil {
		return m.LastError
	}
	return ""
}

type Client struct {
	Version              int32         `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	ID                   string        `protobuf:"bytes,2,opt,name=ID,proto3" json:"ID,omitempty"`
	NodeType             string        `protobuf:"bytes,3,opt,name=NodeType,proto3" json:"NodeType,omitempty"`
	NodeName             string        `protobuf:"bytes,4,opt,name=NodeName,proto3" json:"NodeName,omitempty"`
	ClusterID            string        `protobuf:"bytes,5,opt,name=ClusterID,proto3" json:"ClusterID,omitempty"`
	ReplicasetName       string        `protobuf:"bytes,6,opt,name=ReplicasetName,proto3" json:"ReplicasetName,omitempty"`
	ReplicasetID         string        `protobuf:"bytes,7,opt,name=ReplicasetID,proto3" json:"ReplicasetID,omitempty"`
	LastCommandSent      string        `protobuf:"bytes,8,opt,name=LastCommandSent,proto3" json:"LastCommandSent,omitempty"`
	LastSeen             int64         `protobuf:"varint,9,opt,name=LastSeen,proto3" json:"LastSeen,omitempty"`
	Status               *ClientStatus `protobuf:"bytes,10,opt,name=Status,proto3" json:"Status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Client) Reset()         { *m = Client{} }
func (m *Client) String() string { return proto.CompactTextString(m) }
func (*Client) ProtoMessage()    {}
func (*Client) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b40cafcd4234784, []int{3}
}

func (m *Client) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Client.Unmarshal(m, b)
}
func (m *Client) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Client.Marshal(b, m, deterministic)
}
func (m *Client) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Client.Merge(m, src)
}
func (m *Client) XXX_Size() int {
	return xxx_messageInfo_Client.Size(m)
}
func (m *Client) XXX_DiscardUnknown() {
	xxx_messageInfo_Client.DiscardUnknown(m)
}

var xxx_messageInfo_Client proto.InternalMessageInfo

func (m *Client) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *Client) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Client) GetNodeType() string {
	if m != nil {
		return m.NodeType
	}
	return ""
}

func (m *Client) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *Client) GetClusterID() string {
	if m != nil {
		return m.ClusterID
	}
	return ""
}

func (m *Client) GetReplicasetName() string {
	if m != nil {
		return m.ReplicasetName
	}
	return ""
}

func (m *Client) GetReplicasetID() string {
	if m != nil {
		return m.ReplicasetID
	}
	return ""
}

func (m *Client) GetLastCommandSent() string {
	if m != nil {
		return m.LastCommandSent
	}
	return ""
}

func (m *Client) GetLastSeen() int64 {
	if m != nil {
		return m.LastSeen
	}
	return 0
}

func (m *Client) GetStatus() *ClientStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

type RunBackupParams struct {
	BackupType           BackupType      `protobuf:"varint,1,opt,name=BackupType,proto3,enum=api.BackupType" json:"BackupType,omitempty"`
	CompressionType      CompressionType `protobuf:"varint,2,opt,name=CompressionType,proto3,enum=api.CompressionType" json:"CompressionType,omitempty"`
	Cypher               Cypher          `protobuf:"varint,3,opt,name=Cypher,proto3,enum=api.Cypher" json:"Cypher,omitempty"`
	DestinationType      DestinationType `protobuf:"varint,4,opt,name=DestinationType,proto3,enum=api.DestinationType" json:"DestinationType,omitempty"`
	Dirname              string          `protobuf:"bytes,5,opt,name=Dirname,proto3" json:"Dirname,omitempty"`
	Filename             string          `protobuf:"bytes,6,opt,name=Filename,proto3" json:"Filename,omitempty"`
	StartOplogTs         int64           `protobuf:"varint,7,opt,name=StartOplogTs,proto3" json:"StartOplogTs,omitempty"`
	Description          string          `protobuf:"bytes,8,opt,name=Description,proto3" json:"Description,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *RunBackupParams) Reset()         { *m = RunBackupParams{} }
func (m *RunBackupParams) String() string { return proto.CompactTextString(m) }
func (*RunBackupParams) ProtoMessage()    {}
func (*RunBackupParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b40cafcd4234784, []int{4}
}

func (m *RunBackupParams) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RunBackupParams.Unmarshal(m, b)
}
func (m *RunBackupParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RunBackupParams.Marshal(b, m, deterministic)
}
func (m *RunBackupParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunBackupParams.Merge(m, src)
}
func (m *RunBackupParams) XXX_Size() int {
	return xxx_messageInfo_RunBackupParams.Size(m)
}
func (m *RunBackupParams) XXX_DiscardUnknown() {
	xxx_messageInfo_RunBackupParams.DiscardUnknown(m)
}

var xxx_messageInfo_RunBackupParams proto.InternalMessageInfo

func (m *RunBackupParams) GetBackupType() BackupType {
	if m != nil {
		return m.BackupType
	}
	return BackupType_LOGICAL
}

func (m *RunBackupParams) GetCompressionType() CompressionType {
	if m != nil {
		return m.CompressionType
	}
	return CompressionType_NO_COMPRESSION
}

func (m *RunBackupParams) GetCypher() Cypher {
	if m != nil {
		return m.Cypher
	}
	return Cypher_NO_CYPHER
}

func (m *RunBackupParams) GetDestinationType() DestinationType {
	if m != nil {
		return m.DestinationType
	}
	return DestinationType_FILE
}

func (m *RunBackupParams) GetDirname() string {
	if m != nil {
		return m.Dirname
	}
	return ""
}

func (m *RunBackupParams) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

func (m *RunBackupParams) GetStartOplogTs() int64 {
	if m != nil {
		return m.StartOplogTs
	}
	return 0
}

func (m *RunBackupParams) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type BackupReplica struct {
	AgentID              string   `protobuf:"bytes,1,opt,name=AgentID,proto3" json:"AgentID,omitempty"`
	NodeType             string   `protobuf:"bytes,2,opt,name=NodeType,proto3" json:"NodeType,omitempty"`
	NodeName             string   `protobuf:"bytes,3,opt,name=NodeName,proto3" json:"NodeName,omitempty"`
	ClusterID            string   `protobuf:"bytes,4,opt,name=ClusterID,proto3" json:"ClusterID,omitempty"`
	ReplicasetName       string   `protobuf:"bytes,5,opt,name=ReplicasetName,proto3" json:"ReplicasetName,omitempty"`
	ReplicasetID         string   `protobuf:"bytes,6,opt,name=ReplicasetID,proto3" json:"ReplicasetID,omitempty"`
	StartedAt            int64    `protobuf:"varint,7,opt,name=StartedAt,proto3" json:"StartedAt,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BackupReplica) Reset()         { *m = BackupReplica{} }
func (m *BackupReplica) String() string { return proto.CompactTextString(m) }
func (*BackupReplica) ProtoMessage()    {}
func (*BackupReplica) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b40cafcd4234784, []int{5}
}

func (m *BackupReplica) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BackupReplica.Unmarshal(m, b)
}
func (m *BackupReplica) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BackupReplica.Marshal(b, m, deterministic)
}
func (m *BackupReplica) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BackupReplica.Merge(m, src)
}
func (m *BackupReplica) XXX_Size() int {
	return xxx_messageInfo_BackupReplica.Size(m)
}
func (m *BackupReplica) XXX_DiscardUnknown() {
	xxx_messageInfo_BackupReplica.DiscardUnknown(m)
}

var xxx_messageInfo_BackupReplica proto.InternalMessageInfo

func (m *BackupReplica) GetAgentID() string {
	if m != nil {
		return m.AgentID
	}
	return ""
}

func (m *BackupReplica) GetNodeType() string {
	if m != nil {
		return m.NodeType
	}
	return ""
}

func (m *BackupReplica) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *BackupReplica) GetClusterID() string {
	if m != nil {
		return m.ClusterID
	}
	return ""
}

func (m *BackupReplica) GetReplicasetName() string {
	if m != nil {
		return m.ReplicasetName
	}
	return ""
}

func (m *BackupReplica) GetReplicasetID() string {
	if m != nil {
		return m.ReplicasetID
	}
	return ""
}

func (m *BackupReplica) GetStartedAt() int64 {
	if m != nil {
		return m.StartedAt
	}
	return 0
}

func init() {
	proto.RegisterEnum("api.BackupType", BackupType_name, BackupType_value)
	proto.RegisterEnum("api.DestinationType", DestinationType_name, DestinationType_value)
	proto.RegisterEnum("api.CompressionType", CompressionType_name, CompressionType_value)
	proto.RegisterEnum("api.Cypher", Cypher_name, Cypher_value)
	proto.RegisterType((*Empty)(nil), "api.Empty")
	proto.RegisterType((*Error)(nil), "api.Error")
	proto.RegisterType((*ClientStatus)(nil), "api.ClientStatus")
	proto.RegisterType((*Client)(nil), "api.Client")
	proto.RegisterType((*RunBackupParams)(nil), "api.RunBackupParams")
	proto.RegisterType((*BackupReplica)(nil), "api.BackupReplica")
}

func init() { proto.RegisterFile("api/api.proto", fileDescriptor_1b40cafcd4234784) }

var fileDescriptor_1b40cafcd4234784 = []byte{
	// 916 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x56, 0xdd, 0x6e, 0xeb, 0x44,
	0x10, 0x8e, 0xe3, 0xc4, 0x49, 0x26, 0x4d, 0xea, 0xb3, 0x42, 0xc2, 0x54, 0x15, 0x8a, 0x0c, 0x42,
	0x39, 0x05, 0x12, 0x54, 0x0e, 0x57, 0x20, 0xa4, 0xc4, 0xce, 0xe9, 0xb1, 0x48, 0x13, 0xcb, 0x6e,
	0x41, 0xed, 0x0d, 0xda, 0x26, 0xab, 0xd4, 0x22, 0xfe, 0x91, 0xbd, 0x41, 0xf4, 0x69, 0x78, 0x0d,
	0x5e, 0x80, 0x27, 0xe1, 0x8a, 0xb7, 0x40, 0xfb, 0x63, 0xc7, 0x76, 0xcb, 0x81, 0xbb, 0x9d, 0x6f,
	0xbe, 0xd9, 0x99, 0xdd, 0xf9, 0xc6, 0x6b, 0x18, 0xe0, 0x24, 0x98, 0xe2, 0x24, 0x98, 0x24, 0x69,
	0x4c, 0x63, 0xa4, 0xe2, 0x24, 0x38, 0xfb, 0x30, 0x24, 0x59, 0x86, 0x77, 0x24, 0x9b, 0xe6, 0x0b,
	0xe1, 0x35, 0x3b, 0xd0, 0x5e, 0x84, 0x09, 0x7d, 0x32, 0xbf, 0x81, 0xf6, 0x22, 0x4d, 0xe3, 0x14,
	0x19, 0xd0, 0xb9, 0x16, 0x1c, 0x43, 0x19, 0x29, 0xe3, 0x9e, 0x97, 0x9b, 0x08, 0x41, 0xcb, 0x8a,
	0xb7, 0xc4, 0x68, 0x8e, 0x94, 0xb1, 0xea, 0xf1, 0xb5, 0xf9, 0x47, 0x0b, 0x4e, 0xac, 0x7d, 0x40,
	0x22, 0xea, 0x53, 0x4c, 0x0f, 0x19, 0xfa, 0x0c, 0x86, 0x1e, 0x49, 0xf6, 0xc1, 0x06, 0xfb, 0x84,
	0xde, 0xde, 0x3a, 0xb6, 0xdc, 0xa5, 0x86, 0x56, 0x79, 0x2b, 0x1c, 0x8a, 0x6d, 0x2b, 0x3c, 0x86,
	0xa2, 0x2f, 0xe0, 0xd5, 0x11, 0xf9, 0x91, 0xa4, 0x59, 0x10, 0x47, 0x86, 0x3a, 0x52, 0xc6, 0x2d,
	0xef, 0xb9, 0x03, 0x8d, 0xe1, 0xd4, 0x3b, 0x44, 0x51, 0x10, 0xed, 0xec, 0xf9, 0x1c, 0x6f, 0x7e,
	0x39, 0x24, 0x46, 0x6b, 0xa4, 0x8c, 0xbb, 0x5e, 0x1d, 0x46, 0x13, 0x40, 0x12, 0x5a, 0x27, 0xfb,
	0x78, 0x27, 0xc9, 0x6d, 0x4e, 0x7e, 0xc1, 0x83, 0x3e, 0x06, 0x10, 0xab, 0x9b, 0xa7, 0x84, 0x18,
	0x1a, 0xaf, 0xb5, 0x84, 0xa0, 0x11, 0xf4, 0xad, 0x38, 0x4c, 0x52, 0x92, 0xf1, 0x0a, 0x3b, 0x9c,
	0x50, 0x86, 0xd0, 0x39, 0xf4, 0x16, 0xd1, 0x26, 0x7d, 0x4a, 0x28, 0xd9, 0x1a, 0x5d, 0xee, 0x3f,
	0x02, 0x2c, 0xde, 0x26, 0x19, 0x0d, 0x22, 0x4c, 0x59, 0x7c, 0x4f, 0xc4, 0x97, 0x20, 0xd6, 0x18,
	0x3b, 0x48, 0x23, 0x76, 0x55, 0x20, 0x1a, 0x23, 0x4d, 0x74, 0x06, 0xdd, 0xb7, 0xc1, 0x9e, 0x70,
	0x57, 0x9f, 0xbb, 0x0a, 0x9b, 0x45, 0xf9, 0x14, 0xa7, 0x2c, 0xe7, 0x09, 0xef, 0x5b, 0x6e, 0x8a,
	0xa8, 0x28, 0xc8, 0x1e, 0xc9, 0xd6, 0x18, 0x70, 0x57, 0x61, 0x23, 0x13, 0x4e, 0x38, 0x8d, 0xdf,
	0xc0, 0x4d, 0x66, 0x0c, 0xb9, 0xbf, 0x82, 0xb1, 0x8a, 0x97, 0x38, 0x2b, 0x28, 0xa7, 0x9c, 0x52,
	0x86, 0xd8, 0x89, 0x99, 0xc9, 0x75, 0x65, 0xe8, 0xe2, 0xc4, 0x05, 0x60, 0xfe, 0xd9, 0x04, 0x4d,
	0x48, 0x87, 0x15, 0xf9, 0xab, 0x6c, 0x2d, 0x53, 0x4b, 0xdb, 0xcb, 0x4d, 0x34, 0x84, 0xa6, 0x63,
	0x4b, 0x69, 0x34, 0x1d, 0x9b, 0x15, 0xbd, 0x8a, 0xb7, 0x84, 0x37, 0x41, 0x15, 0x47, 0xcd, 0xed,
	0xdc, 0xc7, 0xc5, 0xd4, 0x3a, 0xfa, 0xb8, 0x8c, 0xce, 0xa1, 0x67, 0xed, 0x0f, 0x19, 0x25, 0xa9,
	0x63, 0xf3, 0x2e, 0xf7, 0xbc, 0x23, 0x50, 0x12, 0x63, 0x26, 0xc5, 0xa8, 0x55, 0xc4, 0x28, 0x51,
	0x76, 0x2d, 0x47, 0xc4, 0xb1, 0x65, 0x97, 0x2b, 0x18, 0x93, 0x20, 0x3b, 0xa3, 0x15, 0x87, 0x21,
	0x8e, 0xb6, 0x3e, 0x89, 0xa8, 0x6c, 0x76, 0x1d, 0x66, 0xf5, 0x32, 0xc8, 0x27, 0x44, 0xf4, 0x5b,
	0xf5, 0x0a, 0x1b, 0xbd, 0x06, 0x4d, 0x0c, 0x14, 0xef, 0x75, 0xff, 0xf2, 0xd5, 0x84, 0x4d, 0x74,
	0x79, 0xd2, 0x3c, 0x49, 0x30, 0xff, 0x6a, 0x72, 0xd1, 0x0b, 0x2d, 0xba, 0x38, 0xc5, 0x61, 0x86,
	0xa6, 0x15, 0xb5, 0xb2, 0x3b, 0x1d, 0x5e, 0x9e, 0xf2, 0x2d, 0x8e, 0x70, 0x45, 0xbe, 0xdf, 0xc3,
	0x69, 0x49, 0xab, 0x3c, 0xaa, 0xc9, 0xa3, 0x3e, 0x10, 0x89, 0xab, 0x3e, 0xaf, 0x4e, 0x46, 0x9f,
	0x80, 0x66, 0x3d, 0x25, 0x8f, 0x24, 0xe5, 0x5d, 0x19, 0x5e, 0xf6, 0x45, 0x18, 0x87, 0x3c, 0xe9,
	0x62, 0x49, 0x4a, 0x82, 0xe6, 0x49, 0x5a, 0xa5, 0x24, 0x35, 0x9f, 0x57, 0x27, 0x97, 0x27, 0xa0,
	0xfd, 0xef, 0x13, 0xa0, 0xd5, 0x26, 0xa0, 0xae, 0xe5, 0xce, 0xcb, 0x5a, 0xb6, 0x49, 0xb6, 0x49,
	0x83, 0x84, 0x4f, 0x5f, 0xb7, 0x98, 0xbe, 0x1c, 0x32, 0xff, 0x56, 0x60, 0x20, 0xee, 0x4b, 0x76,
	0x9b, 0x55, 0x33, 0xdb, 0x91, 0x88, 0x16, 0x9f, 0xb8, 0xdc, 0xac, 0x88, 0xb4, 0xf9, 0x1e, 0x91,
	0xaa, 0xef, 0x13, 0x69, 0xeb, 0xbf, 0x45, 0xda, 0xfe, 0x5f, 0x22, 0xd5, 0x5e, 0x10, 0xe9, 0x39,
	0xf4, 0xe4, 0x67, 0x60, 0x46, 0xe5, 0x85, 0x1c, 0x81, 0x8b, 0x71, 0x59, 0x3d, 0xa8, 0x0f, 0x9d,
	0xe5, 0xfa, 0xca, 0xb1, 0x66, 0x4b, 0xbd, 0x81, 0x06, 0xd0, 0x7b, 0xb7, 0xbe, 0x99, 0xcf, 0xac,
	0x1f, 0x6e, 0x5d, 0x5d, 0xb9, 0xf8, 0xf4, 0x59, 0x47, 0x51, 0x17, 0x5a, 0x6f, 0x9d, 0xe5, 0x42,
	0x6f, 0xa0, 0x0e, 0xa8, 0xb3, 0x9f, 0x7c, 0x5d, 0xb9, 0xb0, 0x9f, 0x89, 0x0b, 0x21, 0x18, 0xae,
	0xd6, 0x3f, 0x5b, 0xeb, 0x6b, 0xd7, 0x5b, 0xf8, 0xbe, 0xb3, 0x5e, 0xe9, 0x0d, 0x16, 0x79, 0x75,
	0xef, 0xb8, 0xba, 0x82, 0x00, 0x34, 0x7f, 0x35, 0x73, 0xdd, 0x3b, 0xbd, 0xc9, 0x76, 0x59, 0xde,
	0xbf, 0xd1, 0xd5, 0x8b, 0x6f, 0x73, 0x89, 0xb1, 0x22, 0x58, 0xf0, 0x9d, 0xfb, 0x6e, 0xe1, 0xc9,
	0x3c, 0x0b, 0x5f, 0x57, 0xd8, 0xc2, 0x5e, 0xf8, 0x22, 0xc6, 0xb3, 0xde, 0xe8, 0x2a, 0x5f, 0xf8,
	0x33, 0xbd, 0x75, 0xf9, 0xbb, 0x02, 0xea, 0x2c, 0x09, 0xd0, 0x6b, 0x80, 0x2b, 0x42, 0xc5, 0x1c,
	0x65, 0x08, 0xb8, 0xee, 0xf8, 0x03, 0x78, 0xd6, 0x2f, 0x4d, 0x98, 0xd9, 0xf8, 0x4a, 0x41, 0x53,
	0xe8, 0x15, 0x63, 0x85, 0x84, 0x42, 0x6b, 0x63, 0x76, 0x26, 0xe3, 0xf9, 0xe7, 0xac, 0x81, 0xbe,
	0x03, 0xc4, 0xe6, 0x57, 0x30, 0xae, 0x09, 0xc5, 0x5b, 0x4c, 0x71, 0x25, 0x87, 0x31, 0x29, 0x9e,
	0xdf, 0x2a, 0xcb, 0x6c, 0xcc, 0xef, 0xe0, 0xa3, 0x20, 0x9e, 0xec, 0xd2, 0x64, 0x33, 0x21, 0xbf,
	0xe1, 0x30, 0xd9, 0x93, 0xac, 0x60, 0xcf, 0x07, 0xf2, 0x0d, 0xce, 0x5c, 0xf6, 0x6a, 0xbb, 0xca,
	0xfd, 0xe7, 0xbb, 0x80, 0x3e, 0x1e, 0x1e, 0x26, 0x9b, 0x38, 0x9c, 0x26, 0x24, 0xdd, 0xc4, 0x11,
	0x9e, 0x86, 0x71, 0xb4, 0x8b, 0xb7, 0x0f, 0x5f, 0x3e, 0xf0, 0xad, 0xa7, 0xfc, 0x81, 0x67, 0x3f,
	0x02, 0x0f, 0x1a, 0x5f, 0x7e, 0xfd, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x51, 0xd9, 0x0c, 0xf9,
	0x1a, 0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ApiClient is the client API for Api service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ApiClient interface {
	GetClients(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Api_GetClientsClient, error)
	RunBackup(ctx context.Context, in *RunBackupParams, opts ...grpc.CallOption) (*Error, error)
	LastBackupMetadata(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*messages.BackupMetadata, error)
}

type apiClient struct {
	cc *grpc.ClientConn
}

func NewApiClient(cc *grpc.ClientConn) ApiClient {
	return &apiClient{cc}
}

func (c *apiClient) GetClients(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Api_GetClientsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Api_serviceDesc.Streams[0], "/api.Api/GetClients", opts...)
	if err != nil {
		return nil, err
	}
	x := &apiGetClientsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Api_GetClientsClient interface {
	Recv() (*Client, error)
	grpc.ClientStream
}

type apiGetClientsClient struct {
	grpc.ClientStream
}

func (x *apiGetClientsClient) Recv() (*Client, error) {
	m := new(Client)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *apiClient) RunBackup(ctx context.Context, in *RunBackupParams, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := c.cc.Invoke(ctx, "/api.Api/RunBackup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) LastBackupMetadata(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*messages.BackupMetadata, error) {
	out := new(messages.BackupMetadata)
	err := c.cc.Invoke(ctx, "/api.Api/LastBackupMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApiServer is the server API for Api service.
type ApiServer interface {
	GetClients(*Empty, Api_GetClientsServer) error
	RunBackup(context.Context, *RunBackupParams) (*Error, error)
	LastBackupMetadata(context.Context, *Empty) (*messages.BackupMetadata, error)
}

func RegisterApiServer(s *grpc.Server, srv ApiServer) {
	s.RegisterService(&_Api_serviceDesc, srv)
}

func _Api_GetClients_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ApiServer).GetClients(m, &apiGetClientsServer{stream})
}

type Api_GetClientsServer interface {
	Send(*Client) error
	grpc.ServerStream
}

type apiGetClientsServer struct {
	grpc.ServerStream
}

func (x *apiGetClientsServer) Send(m *Client) error {
	return x.ServerStream.SendMsg(m)
}

func _Api_RunBackup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunBackupParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).RunBackup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Api/RunBackup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).RunBackup(ctx, req.(*RunBackupParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_LastBackupMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).LastBackupMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Api/LastBackupMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).LastBackupMetadata(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Api_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Api",
	HandlerType: (*ApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RunBackup",
			Handler:    _Api_RunBackup_Handler,
		},
		{
			MethodName: "LastBackupMetadata",
			Handler:    _Api_LastBackupMetadata_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetClients",
			Handler:       _Api_GetClients_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/api.proto",
}
