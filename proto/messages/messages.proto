// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";
option go_package = "github.com/percona/mongodb-backup/proto/messages";

option java_multiple_files = true;
option java_package = "io.grpc.examples.messages";
option java_outer_classname = "MessagesProto";

package messages;

service Messages {
  rpc MessagesChat(stream ClientMessage) returns (stream ServerMessage) {}
  rpc DBBackupFinished(DBBackupFinishStatus) returns (Ack) {}
  rpc OplogBackupFinished(OplogBackupFinishStatus) returns (Ack) {}
  rpc RestoreCompleted(RestoreComplete) returns (Ack) {}
}

enum ErrorType {
   NO_ERROR                  = 0;
   NOT_IMPLEMENTED_YET       = 1;
   COMMUNICATION_ERROR       = 2;
   CLIENT_ALREADY_REGISTERED = 3;
}

enum BackupType {
   LOGICAL   = 0;
   HOTBACKUP = 1;
}

enum DestinationType {
   FILE = 0; 
   AWS  = 1;
}

enum CompressionType {
   NO_COMPRESSION = 0;
   GZIP           = 1;
   SNAPPY         = 2;
   LZ4            = 3;
}

enum Cypher {
    NO_CYPHER = 0;
    AES       = 1;
    DES       = 2;
    RC4       = 3;
    RSA       = 4;
}

enum NodeType {
    UNDEFINED        = 0; 
    MONGOD           = 1; // mongod without replication enabled. We should ignore this nodetype at backup-time as it has no oplog (but still send it in the Register message)
    MONGOD_REPLSET   = 2; // mongod with replication enabled and no sharding
    MONGOD_SHARDSVR  = 3; // mongod that is a shard server
    MONGOD_CONFIGSVR = 4; // mongod that is a sharding config serve
    MONGOS           = 5; // mongos that is a sharding router
}

enum RestoreStatus {
    Not_Running    = 0;
    RestoringDB    = 1;
    RestoringOplog = 2;
}

message Ack {}
message Empty {}
message GetBackupSource {}
message CancelBackup {}
message GetStatus {}
message Ping {}
message StartBalancer {}
message StopBalancer {}

message ReplicasetMetadata {
	string ReplicasetUUID  = 1;
	string ReplicasetName  = 2;
	string DBBackupName    = 3;
	string OplogBackupName = 4;
}

message BackupMetadata {
	int64           StartTs                     = 1;
	int64           EndTs                       = 2;
	BackupType      BackupType                  = 3;
	int64           OplogStartTime              = 4;
	int64           LastOplogTs                 = 5;
	DestinationType DestinationType             = 6;
	string          DestinationDir              = 7;
	Cypher          Cypher                      = 8;
	CompressionType CompressionType             = 9;
    string          Description                 = 10;
	map<string, ReplicasetMetadata> Replicasets = 11;
}

message RestoreBackup {
  BackupType      BackupType        = 1;
  DestinationType SourceType        = 2;
  string          SourceBucket      = 3; // This is also used as S3 bucket name
  string          DBSourceName      = 4;
  string          OplogSourceName   = 5;
  CompressionType CompressionType   = 6;
  Cypher          Cypher            = 7;
  int64           OplogStartTime    = 8;
  bool            SkipUsersAndRoles = 9; // Used only for testing
}

message RestoreComplete {
  string ClientID = 1;
  Error  Err      = 2;
}

message Error {
  string Message = 1;
  ErrorType Code = 2;
}

message StartBackup {
  BackupType      BackupType      = 1;
  DestinationType DestinationType = 2;
  string          NamePrefix      = 3; 
  string          DBBackupName    = 4;
  string          OplogBackupName = 5;
  string          DestinationDir  = 6; // This is also used as S3 bucket name
  CompressionType CompressionType = 7;
  Cypher          Cypher          = 8;
  int64           OplogStartTime  = 9;
  string          Description     = 10;
}

message StopOplogTail {
  int64 Ts    = 1;
}

message ServerMessage {
  int32       version = 1;
  oneof Payload {
    Ack                 AckMsg           = 2;
    GetBackupSource     BackupSourceMsg  = 3;
    GetStatus           GetStatusMsg     = 4;
    Ping                PingMsg          = 5;
    Error               ErrorMsg         = 6;
    StartBalancer       StartBalancerMsg = 7;
    StopBalancer        StopBalancerMsg  = 8;
    StartBackup         StartBackupMsg   = 9;
    CancelBackup        CancelBackupMsg  = 10;
    StopOplogTail       StopOplogTailMsg = 11;
    RestoreBackup       RestoreBackupMsg = 12;
  }
}

message ClientMessage {
  int32       version  = 1;
  string      clientID = 2;
  oneof Payload {
    Ack                     AckMsg            = 3;
    Error                   ErrorMsg          = 4;
    BackupSource            BackupSourceMsg   = 5;
    Register                RegisterMsg       = 6;
    Pong                    PingMsg           = 7;
    DBBackupFinishStatus    BackupFinishedMsg = 8;
    OplogBackupFinishStatus OplogFinishedMsg  = 9; 
    Status                  StatusMsg         = 10;
  }
}

message BackupSource {
    string SourceClient = 1;
}

message DBBackupFinishStatus {
    string ClientID = 1;
    bool   OK       = 2;
    int64  Ts       = 3;
    string Error    = 4;
}

message OplogBackupFinishStatus {
    string ClientID = 1;
    bool   OK       = 2;
    int64  Ts       = 3;
    string Error    = 4;
}

message Register {
  NodeType NodeType     = 1;
  string NodeName       = 2;
  string ClusterID      = 3; // This field will hold a bson.ObjectIdHex
  string ReplicasetID   = 4;
  string ReplicasetName = 5;
  string BackupDir      = 6;
}

message Pong {
  int64 Timestamp = 1;
}

message Status {
  bool            RunningDBBackUp    = 1;
  bool            RunningOplogBackup = 2;
  RestoreStatus   RestoreStatus      = 3;
  BackupType      BackupType         = 4;
  uint64          BytesSent          = 5;
  int64           LastOplogTs        = 6;
  int64           BackupCompleted    = 7; // TS when the backup has finish
  string          LastError          = 8;
  uint64          ReplicasetVersion  = 9;
  DestinationType DestinationType    = 10;
  string          DestinationName    = 11;
  string          DestinationDir     = 12; // This is also used as S3 bucket name
  CompressionType CompressionType    = 13;
  Cypher          Cypher             = 14;
  int64           StartOplogTs       = 15;
}
